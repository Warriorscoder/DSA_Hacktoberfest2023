
/**** this is using DFS ****/

#include <iostream>
#include <unordered_map>
#include <list>
using namespace std;
/*Topological sorting for Directed Acyclic Graph (DAG) -> is a linear ordering of vertices such that for every directed edge u --> v, vertex u comes before v in the ordering.*/

class graph
{
public:
    unordered_map<int, list<int>> mp;

    void adjlist(int u, int v, bool direction)
    {
        mp[u].push_back(v);
        if (direction == 0)
        {
            mp[v].push_back(u);
        }
    }

    void print()
    {
        for (auto i : mp)
        {
            cout << i.first << " -> ";
            for (auto j : i.second)
            {
                cout << j << ",";
            }
            cout << endl;
        }
    }
    void topological_sort(unordered_map<int, bool> &verify, int i)
    {
        verify[i] = 1;
        cout << i << " ";
        for (auto j : mp[i])
        {
            if (!verify[i])
            {
                topological_sort(verify, i);
            }
        }
    }
    void DFS(int node)
    {
        unordered_map<int, bool> verify;

        for (int i = 0; i < node; i++)
        {
            if (!verify[i])
            {
                topological_sort(verify, i);
            }
        }
    }
};
int main()
{
    graph one;
    int node, edges;

    cin >> node >> edges;

    for (int i = 0; i < edges; i++)
    {
        int u, v;
        cin >> u >> v;

        one.adjlist(u, v, 1);
    }

    one.print();

    one.DFS(node);
}
